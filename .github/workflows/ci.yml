name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.2'

    - name: Install flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Run flake8
      run: flake8 .


  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: 'your-super-secret-key-for-tests-here'
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.2'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/django-rest-app:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/django-rest-app:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Deploy to Server
      run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          # Создаем .env файл
          cat > .env << 'ENV_EOF'
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          NAME=${{ secrets.NAME }}
          USER=${{ secrets.USER }}
          PASSWORD=${{ secrets.PASSWORD }}
          HOST=${{ secrets.HOST }}
          PORT=${{ secrets.PORT }}
                           
          
          DEBUG=True
          
          # Stripe
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_API_VERSION=${{ secrets.STRIPE_API_VERSION }}
          STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        
          CELERY_BROKER_URL=redis://redis:6379/0
          CELERY_RESULT_BACKEND=redis://redis:6379/0
          ENV_EOF
        
          # Выполняем docker команды (это отдельные команды, а не часть файла .env)
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/django-rest-app:${{ github.sha }}
          docker stop django-rest-app || true
          docker rm django-rest-app || true
          docker run -d --name django-rest-app -p 80:8000 --env-file .env ${{ secrets.DOCKER_HUB_USERNAME }}/django-rest-app:${{ github.sha }}
          EOF



